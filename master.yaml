# Prerequisites 1
# Before you can start this process, you need the following:
# - Your AWS account must have one VPC available to be created in the selected region
# - Amazon EC2 key pair
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This is a master template to create a EKS Cluster Architecture.
    Last Modified: 19th March 2020
    Author: Thinegan Ratnam <thinegan@thinegan.com>

###############################################################################################################

Parameters: 

  PMOWNIP:
    Description: "Update this with your own office/home public ip address"
    Type: "String"

  PMKeyName:
    Description: "Enter an existing EC2 KeyPair."
    Type: AWS::EC2::KeyPair::KeyName

  PMTemplateURL:
    Description: "Trying running from s3 bucket."
    Type: "String"

  PMInstanceType: 
    Description: "Enter t2.micro or m1.small. Default is t2.micro."
    Type: "String"
    Default: "t2.medium"

  PMEnvVPC:
    Description: "Stack VPC Environment"
    Type: "String"

  PMHostedZone:
    Description: "Enter an existing Hosted Zone."
    Type: "String"

  PMNodeImageId:
    Description: "Node Images based from Region."
    Type: AWS::EC2::Image::Id

  PMGenNodeTypeOverride:
    Type: String
    Description: "multiple spot instances to override(seperated by comma)"
    Default: "t3.medium,t3.large,t3.xlarge"

  PMHiNodeTypeOverride:
    Type: String
    Description: "multiple spot instances to override(seperated by comma)"
    Default: "t3.medium,t3.large,t3.xlarge"

  PMEKSVersion:
    Description: "EKS Cluster Version."
    Type: "String"

  PMGenNodeASGMinSize:
    Description: "Node Auto Scaling Group Min Size."
    Type: "Number"

  PMGenNodeASGMaxSize:
    Description: "Node Auto Scaling Group Max Size."
    Type: "Number"

  PMGenNodeASGDesireSize:
    Description: "Node Auto Scaling Group Desired Capacity."
    Type: "Number"

  PMHiNodeASGMinSize:
    Description: "Node Auto Scaling Group Min Size."
    Type: "Number"

  PMHiNodeASGMaxSize:
    Description: "Node Auto Scaling Group Max Size."
    Type: "Number"

  PMHiNodeASGDesireSize:
    Description: "Node Auto Scaling Group Desired Capacity."
    Type: "Number"

  PMNodeVolumeSize:
    Description: "Node Volume Size."
    Type: "Number"

  PMGenNodeGroupName:
    Description: "Node Instance Naming Group."
    Type: "String"

  PMHiNodeGroupName:
    Description: "Node Instance Naming Group."
    Type: "String"

  PMUserArn1:
    Description: "User Arn 1"
    Type: "String"

  PMUserArn2:
    Description: "User Arn 2"
    Type: "String"

####### Condition Setup #######
Conditions:
  UseProdEnv: !Equals [ !Ref "PMInstanceType", "prod" ]

###############################################################################################################
###############################################################################################################

Resources:

  MyIAMRole:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/eks-iam.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMUserArn1: !Ref "PMUserArn1"
        PMUserArn2: !Ref "PMUserArn2"

  MySecurityGroup:
    Type: "AWS::CloudFormation::Stack"
    # Condition: "UseProdEnv"
    DependsOn:
    - "MyIAMRole"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/eks-securitygroup.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMOWNIP: !Ref "PMOWNIP"
        PMVPC:
          Fn::ImportValue: !Sub "${PMEnvVPC}-VPC"

  MyEKSCluster:
    Type: "AWS::CloudFormation::Stack"
    # Condition: "UseProdEnv"
    DependsOn:
    - "MySecurityGroup"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/eks-cluster.yaml"
      TimeoutInMinutes: '30'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMEnvVPC: !Ref "PMEnvVPC"
        PMEKSVersion: !Ref "PMEKSVersion"
        PMEKSSG: !GetAtt "MySecurityGroup.Outputs.MyEKSSG"
        PMRoleArn: !GetAtt "MyIAMRole.Outputs.IAMEKSArn"

  MyEKSNodeProfile:
    Type: "AWS::CloudFormation::Stack"
    # Condition: "UseProdEnv"
    DependsOn:
    - "MyEKSCluster"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/node-instance-profile.yaml"
      TimeoutInMinutes: '30'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"

  MyEKSWorkerGeneralNodes:
    Type: "AWS::CloudFormation::Stack"
    # Condition: "UseProdEnv"
    DependsOn:
    - "MyEKSNodeProfile"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/amazon-eks-nodegroup-general.yaml"
      TimeoutInMinutes: '30'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMVPC:
          Fn::ImportValue: !Sub "${PMEnvVPC}-VPC"
        ClusterName: !GetAtt "MyEKSCluster.Outputs.EKSClusterName"
        ClusterControlPlaneSecurityGroup: !GetAtt "MySecurityGroup.Outputs.MyEKSSG"
        ClusterLoadBalancerSecurityGroup: !GetAtt "MySecurityGroup.Outputs.MyEKSLBSG"
        NodeInstanceProfile: !GetAtt "MyEKSNodeProfile.Outputs.NodeInstanceProfile"
        NodeAutoScalingGroupMinSize: !Ref "PMGenNodeASGMinSize"
        NodeAutoScalingGroupDesiredSize: !Ref "PMGenNodeASGDesireSize"
        NodeAutoScalingGroupMaxSize: !Ref "PMGenNodeASGMaxSize"
        InstanceTypesOverride: !Ref "PMGenNodeTypeOverride"
        NodeGroupName: !Ref "PMGenNodeGroupName"
        NodeImageId: !Ref "PMNodeImageId"
        NodeVolumeSize: !Ref "PMNodeVolumeSize"
        KeyName: !Ref "PMKeyName"
        VpcId:
          Fn::ImportValue: !Sub "${PMEnvVPC}-VPC"
        Subnets:
          Fn::ImportValue: !Sub "${PMEnvVPC}-PrivateSubnets"

  MyEKSHighNodes:
    Type: "AWS::CloudFormation::Stack"
    # Condition: "UseProdEnv"
    DependsOn:
    - "MyEKSWorkerGeneralNodes"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/amazon-eks-nodegroup-high.yaml"
      TimeoutInMinutes: '30'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        PMVPC:
          Fn::ImportValue: !Sub "${PMEnvVPC}-VPC"
        ClusterName: !GetAtt "MyEKSCluster.Outputs.EKSClusterName"
        ClusterControlPlaneSecurityGroup: !GetAtt "MySecurityGroup.Outputs.MyEKSSG"
        ClusterLoadBalancerSecurityGroup: !GetAtt "MySecurityGroup.Outputs.MyEKSLBSG"
        NodeInstanceProfile: !GetAtt "MyEKSNodeProfile.Outputs.NodeInstanceProfile"
        ExistingNodeSecurityGroups: !GetAtt "MyEKSWorkerGeneralNodes.Outputs.NodeSecurityGroup"
        NodeAutoScalingGroupMinSize: !Ref "PMHiNodeASGMinSize"
        NodeAutoScalingGroupDesiredSize: !Ref "PMHiNodeASGDesireSize"
        NodeAutoScalingGroupMaxSize: !Ref "PMHiNodeASGMaxSize"
        InstanceTypesOverride: !Ref "PMHiNodeTypeOverride"
        NodeGroupName: !Ref "PMHiNodeGroupName"
        NodeImageId: !Ref "PMNodeImageId"
        NodeVolumeSize: !Ref "PMNodeVolumeSize"
        KeyName: !Ref "PMKeyName"
        VpcId:
          Fn::ImportValue: !Sub "${PMEnvVPC}-VPC"
        Subnets:
          Fn::ImportValue: !Sub "${PMEnvVPC}-PrivateSubnets"

Outputs:

  MyNodeInstanceRole:
    Description: "A reference to Node Instance Role"
    Value: !GetAtt "MyEKSNodeProfile.Outputs.NodeInstanceRole"
    Export:
      Name: !Sub "${AWS::StackName}-MyEKSNodeProfile"

  MyGeneralNodeGroup:
    Description: "A reference to Node Group Role ID"
    Value: !GetAtt "MyEKSWorkerGeneralNodes.Outputs.NodeGroup"
    Export:
      Name: !Sub "${AWS::StackName}-MyGeneralNodeGroup"

  MyHighNodeGroup:
    Description: "A reference to Node Group Role ID"
    Value: !GetAtt "MyEKSHighNodes.Outputs.NodeGroup"
    Export:
      Name: !Sub "${AWS::StackName}-MyHighNodeGroup"
